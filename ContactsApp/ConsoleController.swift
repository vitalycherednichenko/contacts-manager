import Darwin
import Foundation

class ConsoleController {
    private let contactController: ContactController
    private let menuView: MenuView
    private let messageView: MessageView
    private let consoleView: ConsoleView
    private let contactView: ContactView
    
    init() {
        self.menuView = MenuView()
        self.contactController = ContactController()
        self.messageView = MessageView()
        self.consoleView = ConsoleView()
        self.contactView = ContactView()
    }
    
    func run() {
        program: while true {
            switch menuView.showMainMenu() {
            case "1": addContact()
            case "2": showContacts()
            case "3": deleteContact()
            case "6":
                messageView.displaySuccess("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è! üëã")
                break program
            default:
                messageView.displayError("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            }
        }
    }
    
    private func showContacts() {
        let contacts = contactController.getAllContacts()
        contactView.showAllContacts(contacts)
    }
    
    private func addContact() {
        contactView.showCreateContact()
        
        guard let firstName = consoleView.inputString(prompt: "üë§ *–ò–º—è: ", required: true) else { return }
        guard let middlename = consoleView.inputString(prompt: "üë§ –û—Ç—á–µ—Å—Ç–≤–æ: ") else { return }
        guard let surname = consoleView.inputString(prompt: "üë§ *–§–∞–º–∏–ª–∏—è: ", required: true) else { return }
        guard let phone = consoleView.inputString(prompt: "üì± –¢–µ–ª–µ—Ñ–æ–Ω: ") else { return }
        guard let note = consoleView.inputString(prompt: "üìù –ó–∞–º–µ—Ç–∫–∞: ") else { return }
        
        let personalInfo = PersonalInfo(
            name: firstName,
            surname: surname,
            middlename: middlename
        )
        
        let additionalInfo = [
            "phone": phone,
            "note": note
        ]
        
        let contact = contactController.createContact(
            personalInfo: personalInfo,
            additionalInfo: additionalInfo
        )
        
        messageView.displaySuccess("–ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:", description: contact.toStr())
        
        messageView.displayInfo("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    }
    
    private func deleteContact() {
        let contacts = contactController.getAllContacts()
        
        if contacts.isEmpty {
            messageView.displayInfo("–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—É—Å—Ç. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        }
        
        contactView.showDeleteContact(contacts)
        
        guard let idString = consoleView.inputString(prompt: "\n–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ", required: true) else {
            return
        }
        
        if idString.lowercased() == "q" {
            return
        }
        
        guard let id = Int(idString) else {
            messageView.displayError("–ù–µ–≤–µ—Ä–Ω—ã–π ID. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")
            messageView.displayInfo("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        }
        
        if contactController.deleteContact(id: id) {
            messageView.displaySuccess("–ö–æ–Ω—Ç–∞–∫—Ç —Å ID \(id) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        } else {
            messageView.displayError("–ö–æ–Ω—Ç–∞–∫—Ç —Å ID \(id) –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }
        
        messageView.displayInfo("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    }
}
