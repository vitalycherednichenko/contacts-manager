import Foundation

protocol ContactPresenterProtocol {
    func getAllContacts() -> [Contact]
    func createContact() -> Contact?
    func deleteContact(id: Int) -> Bool
    func editContact(id: Int) -> Bool
    func setMainContact(id: Int) -> Bool
    func getMainContact() -> Contact?
    func searchContacts(_ query: String, contacts: [Contact]) -> [Contact]
}


class ContactPresenter: ContactPresenterProtocol {
    private var contacts: [Contact]
    private let consoleView: ConsoleView
    private var idCounter: Int
    private let fileManager: FileInteractor
    
    init(fileManager: FileInteractor = FileInteractor()) {
        self.consoleView = ConsoleView()
        self.fileManager = fileManager
        if let savedContacts = fileManager.loadContacts() {
            contacts = savedContacts
            idCounter = contacts.map { $0.id }.max() ?? 0
        } else {
            contacts = []
            idCounter = 0
        }
    }
    
    func getAllContacts() -> [Contact] {
        contacts
    }
    
    public func createContact() -> Contact? {
        let firstName = consoleView.inputString(prompt: "üë§ *–ò–º—è: ", required: true)
        if firstName.lowercased() == "q" { return nil }
        
        let middlename = consoleView.inputString(prompt: "üë§ –û—Ç—á–µ—Å—Ç–≤–æ: ")
        if middlename.lowercased() == "q" { return nil }
        
        let surname = consoleView.inputString(prompt: "üë§ –§–∞–º–∏–ª–∏—è: ")
        if surname.lowercased() == "q" { return nil }
        
        let phone = consoleView.inputString(prompt: "üì± –¢–µ–ª–µ—Ñ–æ–Ω: ")
        if phone.lowercased() == "q" { return nil }
        
        let note = consoleView.inputString(prompt: "üìù –ó–∞–º–µ—Ç–∫–∞: ")
        if note.lowercased() == "q" { return nil }
        
        let personalInfo = PersonalInfo(
            name: firstName,
            surname: surname,
            middlename: middlename
        )
        
        let connects = ConnectsInfo(phone: phone)
        
        idCounter += 1
        
        let contact = Contact(
            id: idCounter,
            personalInfo: personalInfo,
            connects: connects,
            note: note
        )
        
        contacts.append(contact)
        
        try? fileManager.saveContacts(contacts)
        
        return contact
    }
    
    public func editContact(id: Int) -> Bool {
        guard let index = getAllContacts().firstIndex(where: { $0.id == id }) else {
            consoleView.displayError("–ö–æ–Ω—Ç–∞–∫—Ç —Å ID \(id) –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return false
        }
        
        let contact = getAllContacts()[index]
        
        consoleView.menuSubTitle("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
        consoleView.menuInfoItem("‚ÑπÔ∏è  –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–∞–∂–º–∏—Ç–µ Enter")
        consoleView.menuInfoItem("‚óÄÔ∏è  –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—Å—è –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ 'q'")
        consoleView.menuHr()
        
        let namePrompt = "üë§ –ò–º—è [\(contact.personalInfo.name)]: "
        let firstName = consoleView.inputString(prompt: namePrompt)
        if firstName.lowercased() == "q" { return false }
        
        let middlenamePrompt = "üë§ –û—Ç—á–µ—Å—Ç–≤–æ [\(contact.personalInfo.middlename ?? "")]: "
        let middlename = consoleView.inputString(prompt: middlenamePrompt)
        if middlename.lowercased() == "q" { return false }
        
        let surnamePrompt = "üë§ –§–∞–º–∏–ª–∏—è [\(contact.personalInfo.surname ?? "")]: "
        let surname = consoleView.inputString(prompt: surnamePrompt)
        if surname.lowercased() == "q" { return false }
        
        let phonePrompt = "üì± –¢–µ–ª–µ—Ñ–æ–Ω [\(contact.connects.phone ?? "")]: "
        let phone = consoleView.inputString(prompt: phonePrompt)
        if phone.lowercased() == "q" { return false }
        
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
        let notePrompt = "üìù –ó–∞–º–µ—Ç–∫–∞ [\(contact.note ?? "")]: "
        let note = consoleView.inputString(prompt: notePrompt)
        if note.lowercased() == "q" { return false }
        
        // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç PersonalInfo
        let personalInfo = PersonalInfo(
            name: firstName.isEmpty ? contact.personalInfo.name : firstName,
            surname: surname.isEmpty ? contact.personalInfo.surname : surname,
            middlename: middlename.isEmpty ? contact.personalInfo.middlename : middlename
        )
        
        // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç ConnectsInfo
        let connects = ConnectsInfo(
            phone: phone.isEmpty ? (contact.connects.phone ?? "") : phone
        )
        
        // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
        let updatedContact = Contact(
            id: contact.id,
            personalInfo: personalInfo,
            connects: connects,
            note: note.isEmpty ? contact.note : note
        )
        
        contacts[index] = updatedContact
        try? fileManager.saveContacts(contacts)
        return true
    }
    
    public func deleteContact(id: Int) -> Bool {
        guard let index = contacts.firstIndex(where: { $0.id == id }) else {
            return false
        }
        
        contacts.remove(at: index)
        try? fileManager.saveContacts(contacts)
        return true
    }
    
    public func setMainContact(id: Int) -> Bool {
        guard let index = contacts.firstIndex(where: { $0.id == id }) else {
            return false
        }
        
        // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ isMain —É –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        for i in 0..<contacts.count {
            contacts[i].isMain = false
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ isMain –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        contacts[index].isMain = true
        
        try? fileManager.saveContacts(contacts)
        return true
    }
    
    public func getMainContact() -> Contact? {
        return contacts.first { $0.isMain }
    }
    
    public func searchContacts(_ query: String, contacts: [Contact]) -> [Contact] {
        if query.isEmpty {
            return contacts
        }
        
        let lowercasedQuery = query.lowercased()
        return contacts.filter { contact in
            // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
            if contact.personalInfo.name.lowercased().contains(lowercasedQuery) {
                return true
            }
            // –ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏
            if let surname = contact.personalInfo.surname, surname.lowercased().contains(lowercasedQuery) {
                return true
            }
            // –ü–æ–∏—Å–∫ –ø–æ –æ—Ç—á–µ—Å—Ç–≤—É
            if let middlename = contact.personalInfo.middlename, middlename.lowercased().contains(lowercasedQuery) {
                return true
            }
            // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
            if let phone = contact.connects.phone, phone.lowercased().contains(lowercasedQuery) {
                return true
            }
            // –ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–µ
            if let note = contact.note, note.lowercased().contains(lowercasedQuery) {
                return true
            }
            return false
        }
    }
}
