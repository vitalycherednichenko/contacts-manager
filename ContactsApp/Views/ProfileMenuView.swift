import Foundation

protocol ProfileMenuViewProtocol {
    func showProfileMenu()
    func showSearchMainContact()
}

class ProfileMenuView: MenuViewProtocol, ProfileMenuViewProtocol {
    private let presenter: ContactPresenterProtocol
    private let consoleView: ConsoleView
    private let router: RouterProtocol
    
    init(router: RouterProtocol) {
        self.consoleView = ConsoleView()
        self.presenter = ContactPresenter()
        self.router = router
    }
    
    public func run() {
        showProfileMenu()
        if let input = readLine() {
            handleInput(input)
        }
    }
    
    public func showProfileMenu() {
        consoleView.clearScreen()
        consoleView.menuHeader("üë§ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / –ü—Ä–æ—Ñ–∏–ª—å")
        consoleView.menuTitle("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å")
        
        if let mainContact = presenter.getMainContact() {
            print(mainContact.toStr())
        } else {
            consoleView.menuItem("üë§ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
        }
        
        consoleView.menuTitle("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        for item in [
            "1. üë§ –í—ã–±—Ä–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç",
            "2. ‚óÄÔ∏è  –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        ] {
            consoleView.menuItem(item)
        }
        consoleView.callToAction("–í–∞—à –≤—ã–±–æ—Ä:")
    }
    
    public func handleInput(_ input: String) {
        switch input {
        case "1": showSearchMainContact()
        case "2": router.showMainMenu()
        default:
            consoleView.displayError("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        }
        run()
    }
    
    public func showSearchMainContact() {
        consoleView.clearScreen()
        consoleView.menuHeader("üë§ –í—ã–±–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
        consoleView.menuTitle("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–Ω–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–º")
        consoleView.menuInfoItem("‚óÄÔ∏è  –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—Å—è –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ 'q'")
        consoleView.menuHr()
        
        let contacts = presenter.getAllContacts()
        
        if contacts.isEmpty {
            consoleView.displayInfo("–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—É—Å—Ç. –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ '–ö–æ–Ω—Ç–∞–∫—Ç—ã'.")
            return
        }
        
        let query = consoleView.inputString(prompt: "\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤): ")
        
        if query.lowercased() == "q" { return }
        
        let filteredContacts = searchContacts(query, contacts: contacts)
        
        if filteredContacts.isEmpty {
            consoleView.displayInfo("–ü–æ –∑–∞–ø—Ä–æ—Å—É '\(query)' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        }
        
        for contact in filteredContacts {
            print("\n\(ANSIColors.cyan)ID \(contact.id):\(ANSIColors.reset)")
            print(contact.toStr())
        }
        
        let idString = consoleView.inputString(prompt: "\n–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω—ã–º: ", required: true)
        
        if idString.lowercased() == "q" { return }
        
        guard let id = Int(idString) else {
            consoleView.displayError("–ù–µ–≤–µ—Ä–Ω—ã–π ID. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")
            consoleView.displayInfo("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        }
        
        if presenter.setMainContact(id: id) {
            if let contact = presenter.getMainContact() {
                consoleView.displaySuccess("–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", description: contact.toStr())
            }
        } else {
            consoleView.displayError("–ö–æ–Ω—Ç–∞–∫—Ç —Å ID \(id) –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }
        
        consoleView.displayInfo("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    }
    
    private func searchContacts(_ query: String, contacts: [Contact]) -> [Contact] {
        if query.isEmpty {
            return contacts
        }
        
        let lowercasedQuery = query.lowercased()
        return contacts.filter { contact in
            // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
            if contact.personalInfo.name.lowercased().contains(lowercasedQuery) {
                return true
            }
            // –ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏
            if ((contact.personalInfo.surname?.lowercased().contains(lowercasedQuery)) != nil) {
                return true
            }
            // –ü–æ–∏—Å–∫ –ø–æ –æ—Ç—á–µ—Å—Ç–≤—É
            if ((contact.personalInfo.middlename?.lowercased().contains(lowercasedQuery)) != nil) {
                return true
            }
            // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
            if let phone = contact.connects.phone, phone.lowercased().contains(lowercasedQuery) {
                return true
            }
            // –ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–µ
            if let note = contact.note, note.lowercased().contains(lowercasedQuery) {
                return true
            }
            return false
        }
    }
} 
