import Foundation

protocol ContactMenuViewProtocol {
    func showContactsMenu()
    func showCreateContactMenu()
    func showAllContacts()
    func showEditContact(_ contacts: [Contact])
    func showDeleteContact(_ contacts: [Contact])
}

class ContactMenuView: BaseMenuView, ContactMenuViewProtocol {
    private let presenter: ContactPresenterProtocol
    
    override init(router: RouterProtocol) {
        self.presenter = ContactPresenter()
        super.init(router: router)
    }
    
    override public func run() {
        showContactsMenu()
        if let input = readLine() {
            handleInput(input)
        }
    }
    
    public func showContactsMenu() {
        let menuItems = [
            "1. üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç",
            "2. üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã",
            "3. üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤",
            "4. ‚úèÔ∏è  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç",
            "5. üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç",
            "6. ‚óÄÔ∏è  –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é \(ANSIColors.reset)"
        ]
        
        showMenu(
            header: "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / –ö–æ–Ω—Ç–∞–∫—Ç—ã",
            title: "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            menuItems: menuItems
        )
    }
    
    override public func handleInput(_ input: String) {
        switch input {
        case "1":
            showCreateContactMenu()
            createContact()
        case "2": showAllContacts()
        case "3": showSearchContacts()
        case "4": showEditContact(presenter.getAllContacts())
        case "5": showDeleteContact(presenter.getAllContacts())
        case "6": router.showMainMenu()
        default:
            consoleView.displayError("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        }
        run()
    }
    
    public func showCreateContactMenu() {
        consoleView.menuSubTitle("üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
        sleep(1)
        consoleView.menuInfoItem("‚óÄÔ∏è  –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—Å—è –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ 'q'")
        consoleView.menuInfoItem("‚ú≥Ô∏è  –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –æ—Ç–º–µ—á–µ–Ω–æ *")
        consoleView.menuInfoItem("‚ÑπÔ∏è  –ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—è")
        consoleView.menuHr()
    }
    
    private func createContact() {
        if let contact = presenter.createContact() {
            consoleView.displaySuccess("–ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:", description: contact.toStr())
        } else {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª 'q' –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
            return
        }
        waitForEnter()
    }
    
    public func showAllContacts() {
        consoleView.menuSubTitle("üë• –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
        consoleView.menuHr()
        
        let contacts = presenter.getAllContacts()
        if contacts.isEmpty {
            consoleView.menuInfoItem("üì≠ –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—É—Å—Ç.")
        } else {
            for contact in contacts {
                print(contact.toStr())
            }
        }
        waitForEnter()
    }
    
    public func showSearchContacts() {
        let contacts = presenter.getAllContacts()
        if contacts.isEmpty {
            consoleView.displayInfo("–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—É—Å—Ç. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        }
        consoleView.menuSubTitle("üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
        consoleView.menuInfoItem("‚óÄÔ∏è  –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—Å—è –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ 'q'")
        consoleView.menuHr()
        
        let query = consoleView.inputString(prompt: "\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ", required: true)
        
        if handleQInput(query) { return }
        
        let searchResults = presenter.searchContacts(query, contacts: contacts)
        
        if searchResults.isEmpty {
            consoleView.displayInfo("–ü–æ –∑–∞–ø—Ä–æ—Å—É '\(query)' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        } else {
            consoleView.menuSubTitle("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '\(query)':")
            consoleView.menuHr()
            
            for contact in searchResults {
                print(contact.toStr())
            }
        }
        
        waitForEnter()
    }
    
    public func showEditContact(_ contacts: [Contact]) {
        consoleView.menuSubTitle("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
        
        guard let id = searchAndSelectContact(presenter: presenter, action: "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è") else {
            return
        }
        
        if presenter.editContact(id: id) {
            consoleView.displaySuccess("–ö–æ–Ω—Ç–∞–∫—Ç —Å ID \(id) —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω")
        } else {
            consoleView.displayError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Å ID \(id)")
        }
        
        waitForEnter()
    }
    
    public func showDeleteContact(_ contacts: [Contact]) {
        consoleView.menuSubTitle("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
        
        guard let id = searchAndSelectContact(presenter: presenter, action: "—É–¥–∞–ª–µ–Ω–∏—è") else {
            return
        }
        
        if presenter.deleteContact(id: id) {
            consoleView.displaySuccess("–ö–æ–Ω—Ç–∞–∫—Ç —Å ID \(id) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        } else {
            consoleView.displayError("–ö–æ–Ω—Ç–∞–∫—Ç —Å ID \(id) –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }
        
        waitForEnter()
    }
}
